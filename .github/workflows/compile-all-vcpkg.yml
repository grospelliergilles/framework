# CI to compile in all components (Arccon/Arccore/Axlstar/Arcane) together using 'vcpkg'
name: compile-all-vcpkg

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev/gg-test-alien-on-win32-ci
  pull_request:
    branches:
      - main

jobs:
  job:
    name: ${{ matrix.full_name }}-ci-direct
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'windows-2022'
            full_name: 'windows-2022-intelmpi'
            triplet: x64-windows
            vcpkg_os: windows-2022
            cmake_specific_args : '-DARCCORE_BUILD_MODE=Check -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_COMPILER_LAUNCHER="ccache"'
            ctest_specific_args : '-I 1,75'

    env:
      # Indique pour IntelMPI de ne pas faire d'attente active
      I_MPI_WAIT_MODE: 1
      CCACHE_BASEDIR: ${{github.workspace}}
      CCACHE_DIR: '${{ github.workspace }}/ccache'
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_MAXSIZE: 5G
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/builddir/
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      FRAMEWORKCI_ROOT_PATH: '${{ github.workspace }}/../../build_base'
      ALIEN_ROOT_PATH: '${{ github.workspace }}/../../build_base'
      VCPKG_ROOT: '${{ github.workspace }}/../../build_base/framework-ci/vcpkg'
      VCPKG_BUILD_DIR: '${{ github.workspace }}/../../build_base/framework-ci/vcpkg'
      BUILD_COMMANDS_ROOT: '${{ github.workspace }}/../../build_base/framework-ci/_build'
      VCPKG_INSTALL_HASH_PACKAGE_NAME: '1.3.1-${{ matrix.full_name }}-${{ matrix.triplet }}'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      FRAMEWORKCI_BRANCH: main
      ALIEN_BRANCH: dev/gg-add-exports-for-win32

    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Checkout framework-ci
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/framework-ci
          path: framework-ci
          ref: ${{ env.FRAMEWORKCI_BRANCH }}
          submodules: true

      - name: Move framework-ci
        shell: 'bash'
        run: |
          mkdir -p '${{ env.FRAMEWORKCI_ROOT_PATH }}'
          ls -lart '${{ github.workspace }}/framework-ci'
          cd '${{ github.workspace }}' && mv framework-ci '${{ env.FRAMEWORKCI_ROOT_PATH }}'
          ls -lart '${{ env.FRAMEWORKCI_ROOT_PATH }}'

      - name: Setup environment
        shell: 'bash'
        run: |
          echo "${RUNNER_TEMP}/local_bin_dir/bin" >> $GITHUB_PATH
          echo "${RUNNER_TEMP}/local_bin_dir/cmake/bin" >> $GITHUB_PATH
          echo Path variable is: ${PATH}
          echo CMake path is: `which cmake`
          cmake --version
          cmake -DNUGET_PASSWORD="${{ secrets.GITHUB_TOKEN }}" -P '${{ env.BUILD_COMMANDS_ROOT }}/Setup.cmake'
          mkdir -p ${{ env.CCACHE_DIR }}
          cp "${{ github.workspace }}/.github/compile-vcpkg-global.json" "${{ github.workspace }}/global.json"
      
      - name: Setup .Net
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Get cache for 'ccache' tool
        uses: actions/cache@v3
        with:
          path: ${{env.CCACHE_DIR}}
          key: framework-ccache1-${{matrix.full_name}}-${{ github.run_number }}
          restore-keys: |
            framework-ccache1-${{matrix.full_name}}

      - name: 'Display environment after setup'
        shell: 'bash'
        continue-on-error: true
        run: |
          echo 'VCPKG_BUILD_DIR=${VCPKG_BUILD_DIR}'
          echo 'Content of local_bin_dir'
          ls -lart "${RUNNER_TEMP}/local_bin_dir"
          echo 'Content of local_bin_dir/bin'
          ls -lart "${RUNNER_TEMP}/local_bin_dir/bin"
          echo 'Content of local_bin_dir/cmake'
          ls -lart "${RUNNER_TEMP}/local_bin_dir/cmake"
          echo Path variable is: ${PATH}
          echo CMake path is: `which cmake`
          echo Ninja path is: `which ninja`
          echo CCache path is: `which ccache`
          echo Dotnet path is: `which dotnet`
          ccache -z
          cmake --version

      - name: 'Untar vcpkg bootstrap cache'
        shell: 'bash'
        run: |
          cmake -DHASH_PACKAGE_NAME="${{ env.VCPKG_INSTALL_HASH_PACKAGE_NAME }}" -DVCPKG_BUILD_DIR='${{ env.VCPKG_BUILD_DIR }}' -P '${{ env.BUILD_COMMANDS_ROOT }}/vcpkg_cache/DoUntar.cmake'
          ls -lart '${{ env.VCPKG_BUILD_DIR }}'

      - name: Show content of workspace after cache has been restored
        shell: bash
        run: find $RUNNER_WORKSPACE

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Configure arcane
        shell: bash
        run: |
          cmake -S "${{ github.workspace }}/_common/build_all" -B "${{ env.CMAKE_BUILD_DIR }}" -DCMAKE_VERBOSE_MAKEFILE=TRUE -DVCPKG_INSTALLED_DIR="${{ env.VCPKG_BUILD_DIR }}/installed" -DBUILD_SHARED_LIBS=TRUE -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" ${{ matrix.cmake_specific_args }} -DFRAMEWORK_NO_EXPORT_PACKAGES=TRUE -DCMAKE_INSTALL_PREFIX="${{ env.CMAKE_BUILD_DIR }}/install_arcane" -GNinja

      - name: Dump Some Generated files
        shell: bash
        run: |
          echo "Dump CMakeCache.txt"
          cat "${{ env.CMAKE_BUILD_DIR }}/CMakeCache.txt"
          echo "Dump arcane_core_config.h"
          cat "${{ env.CMAKE_BUILD_DIR }}/arcane_core_config.h"

      - name: Build arcane
        shell: bash
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --target copy_dlls

      - name: Get 'ccache' status
        run: ccache -s -v

      - name: Install arcane
        shell: bash
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}" --target install

      - name: Checkout alien
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/alien
          path: alien
          ref: ${{ env.ALIEN_BRANCH }}
          submodules: true

      - name: Move alien
        shell: 'bash'
        run: |
          mkdir -p '${{ env.ALIEN_ROOT_PATH }}'
          ls -lart '${{ github.workspace }}/alien'
          cd '${{ github.workspace }}' && mv alien '${{ env.ALIEN_ROOT_PATH }}'
          ls -lart '${{ env.ALIEN_ROOT_PATH }}'

      - name: Configure alien build script
        shell: bash
        run: |
          cmake -S "${{ env.ALIEN_ROOT_PATH }}/alien" -B "${{ env.ALIEN_ROOT_PATH }}/build_alien" -DCMAKE_VERBOSE_MAKEFILE=TRUE -DVCPKG_INSTALLED_DIR="${{ env.VCPKG_BUILD_DIR }}/installed" -DBUILD_SHARED_LIBS=TRUE -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" -DCMAKE_PREFIX_PATH="${{ env.CMAKE_BUILD_DIR }}/install_arcane" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DALIEN_DEFAULT_OPTIONS=ON -DALIEN_PLUGIN_HYPRE=ON -DALIEN_UNIT_TESTS=ON -GNinja

      - name: Build alien
        shell: bash
        run: |
          cmake --build "${{ env.ALIEN_ROOT_PATH }}/build_alien"

      - name: Dump alien build directory
        continue-on-error: true
        shell: bash
        run: |
          echo "Display alien build directory : ${{ env.ALIEN_ROOT_PATH }}/build_alien"
          ls -lartR "${{ env.ALIEN_ROOT_PATH }}/build_alien"

      - name: Test alien
        continue-on-error: true
        shell: bash
        run: |
          cd "${{ env.ALIEN_ROOT_PATH }}/build_alien" && ctest --output-on-failure
